---
title: "Finding patterns"
---

```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup-files/setup.R")
```

```{python}
#| echo: false
#| message: false
import shutup;shutup.please()
exec(open('setup-files/setup.py').read())
```

```{r}
#| eval: false
#| echo: false
# some data cleaning on the original 'messy' data set
# to create an easy, clean data set to work with
gapminder <- read_csv("data/gapminder2010_socioeconomic.csv")
gapminder %>% 
  mutate(life_expectancy_female = as.numeric(life_expectancy_female)) %>% 
  mutate(life_expectancy_male = replace(life_expectancy_male, which(life_expectancy_male == -999), NA)) %>% 
  mutate(main_religion = str_to_lower(main_religion),
         main_religion = str_squish(main_religion)) %>%
  drop_na() %>% 
  write_csv(file = "data/gapminder_clean.csv")
```

::: {.callout-tip}
## Learning outcomes

-  

:::

## Libraries and functions

::: {.callout-note collapse="true"}
## Click to expand

::: {.panel-tabset group="language"}
## R

### Libraries

```{r}
#| eval: false
library(tidyverse)
library(visdat)
```

### Functions

## Python

### Libraries
### Functions
:::
:::

## Finding patterns

When we set off to gather or explore data, we generally have a research question that we're interested in. We then design an experiment to test this question - in that case our data helps us to find an answer.

Quite often we gather a lot more data than we directly need to answer our research question. As such, it's often very useful to explore our data and look for patterns.

By doing this we can get insight into any trends that might exist in the data, or distributions across the data. We can also look for correlation between different variables (things we've measured) or make comparisons between different groups.

### Loading data

The first step to exploring our data is of course loading it in the first place.

::: {.panel-tabset group="language"}
## R

```{r}
#| message: false
gapminder <- read_csv("data/gapminder_clean.csv")
```

## Python
:::

The `gapminder` data set that we've loaded has 13 different variables, with observations for over 150 different countries in the year 2010.

### Data exploration

To illustrate how we can use different visualisations to look at the same variable, we're going to focus on `life_expectancy` in different contexts.

Let's start off with a simple scatter plot that looks at `life_expectancy` against `income_per_person`:

::: {.panel-tabset group="language"}
## R

```{r}
ggplot(data = gapminder,
       aes(x = income_per_person,
           y = life_expectancy)) +
  geom_point()
```

## Python
:::

It seems that as the income per person increases, so does the life expectancy. We can also see that the life expectancy kind of plateaus - which is not very surprising, since it can't go on indefinitely!

Looking at this plot, it's quite striking how there is quite a range of life expectancy values at the really low income countries. There is information on different world regions in the data (`world_region`). Perhaps there are certain world regions that have particularly low income levels?

This is something we can easily check.

::: {.panel-tabset group="language"}
## R

We simply adjust the previous plot by colouring our data by `world_region`:

```{r}
ggplot(data = gapminder,
       aes(x = income_per_person,
           y = life_expectancy,
           colour = world_region)) +
  geom_point()
```

## Python
:::

Looking at this plot it appears that most of the low-income countries are in sub-Saharan Africa.

## Exercise

::: {.callout-tip collapse="true"}
## Answer
::: {.panel-tabset group="language"}
## R
## Python
:::
:::

## Key points

::: {.callout-note}
-
-
-
:::

{
  "hash": "4c7cc068d46ad35f77f612c9547e2a95",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Space and layout\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Learning outcomes\n\n- Learn how to organise space and layout in plots\n\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n### Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nlibrary(patchwork)\n```\n:::\n\n\n### Functions\n\n:::\n:::\n\n## Purpose and aim\n\nUsing space and layout in plots can have a huge impact on how your message comes across (or not!). For example, by composing multiple panels in a single plot you can walk the reader through a series of subplots to arrive at a point. It is of course possible to create multipanel plots using an imaging programme, copying/pasting individual images. However, this is not very reproducible and there are several ways to do this programmatically. Some of them are illustrated here.\n\n## Loading data\n\nIf you haven't done so yet, please load the data as follows:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- read_csv(\"data/gapminder_clean.csv\")\n```\n:::\n\n\n:::\n\n## Composing plots\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nIn R, the [`patchwork` package](https://patchwork.data-imaginist.com/) (check its documentation, which is full of excellent examples of its usage) is a really useful tool to create multi-panel plots.\n\nBefore we can use it, we need to install it. You can do this by running the following line of code in the console (there is no need to add it to your script, since you do not want to install it every time you run your script):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"patchwork\")\n```\n:::\n\n\nNext, we need to load it, so we can add this to our script (remember: packages need to be loaded every time you restart R, so we do add this to our script):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n```\n:::\n\n\nThe easiest way to use the package is to first save the individual plots we want to assemble in different objects. Let's create three plots to play with. The axis labels are not entirely complete, but it avoids them being too long for demonstration purposes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(data = gapminder, \n             aes(x = child_mortality, y = children_per_woman)) +\n  geom_point(aes(colour = world_region, size = population)) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  scale_size_continuous(trans = \"log10\") +\n  annotate(geom = \"rect\", xmin = 0, xmax = 25, ymin = 1, ymax = 3,\n           colour = \"grey\", fill = NA) +\n  labs(x = \"Child mortality\", y = \"Fertility rate\",\n       colour = \"Income\", size = \"Population\")\n\np2 <- ggplot(data = gapminder, \n             aes(x = child_mortality, y = children_per_woman)) +\n  geom_point(aes(colour = world_region, size = population)) +\n  scale_colour_brewer(palette = \"Dark2\") +\n  scale_size_continuous(trans = \"log10\") +\n  coord_cartesian(xlim = c(0, 25), ylim = c(1, 3)) +\n  labs(x = \"Child mortality\", y = \"Fertility rate\",\n       colour = \"Income\", size = \"Population\")\n\np3 <- ggplot(data = gapminder,\n             aes(x = world_region, y = income_per_person)) +\n  geom_boxplot(aes(fill = world_region)) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_y_continuous(trans = \"log10\") +\n  annotation_logticks(sides = \"l\") +\n  labs(x = \"World region\", y = \"Annual income\") +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(angle = 45, hjust = 1))\n```\n:::\n\n\n\nThere are different ways in which you can specify how to put graphs together using \n`patchwork`, but the way we're going to use in this lesson uses these two operators:\n\n- `p1 | p2` puts the first plot on the _left_ and the second on the _right_\n- `p1 / p2` puts the first plot on the _top_ and the second on the _bottom_\n\nHere is an example using the plots we've made:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# side by side\np1 | p2\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# top and bottom\np1 / p2\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\nWe can combine these two operators for more complex arrangements, by wrapping \ndifferent parts of the grid of plots with `()`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Put p1 and p2 side by side.\n# Then put those on the top and p3 on the bottom\n(p1 | p2) / p3\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nFinally, you can customise these arrangements in several ways using the `plot_layout()` function. For example, we can \"collect\" the legends and define the relative height of each panel:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n((p1 | p2) / p3 ) + \n  plot_layout(guides = \"collect\", heights = c(2, 1))\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe can use `plot_spacer()` to add an empty space to our graph, which can \nbe useful if we want to add something else later on using another program (e.g. an image).\n\nFor example, let's put a blank space where the second plot should be\n\n\n::: {.cell}\n\n```{.r .cell-code}\n((p1 | plot_spacer()) / p3 ) + \n  plot_layout(guides = \"collect\", heights = c(2, 1))\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nFinally, we can also add annotations, which is very useful to add automatic \"tags\" to each panel:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n((p1 | p2) / p3 ) + \n  plot_layout(guides = \"collect\", heights = c(2, 1)) + \n  plot_annotation(tag_levels = \"A\", \n                  title = \"Figure 1\")\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Facetting\n\nIf you're trying to visualise different groups in your data, then you can also create a multi-panel figure. Instead of saving each individual group to a plot and combining them afterwards, you can use _facetting_.\n\nThere are two types of facet functions:\n\n`facet_wrap()` arranges a one-dimensional sequence of panels to fit on one page.\n`facet_grid()` allows you to form a matrix of rows and columns of panels.\n\nFor example, if we want to visualise a scatter plot, displaying the number of `children_per_woman`, against `life_expectancy`. We want to colour the data by `world_region` and split by `income_groups`.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nBoth geometries allow to to specify faceting variables specified with `vars()`. In general:\n\n```\nfacet_wrap(facets = vars(facet_variable))\nfacet_grid(rows = vars(row_variable), cols = vars(col_variable)).\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, \n       aes(x = children_per_woman, y = life_expectancy, colour = world_region)) +\n  geom_point() +\n  facet_wrap(facets = vars(income_groups))\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n:::\n\nIf instead we want a matrix of facets to display `income_groups` and `economic_organisation`, then we use `facet_grid()`:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, \n       aes(x = children_per_woman, y = life_expectancy, colour = world_region)) +\n  geom_point() +\n  facet_grid(rows = vars(income_groups), cols = vars(is_oecd))\n```\n\n::: {.cell-output-display}\n![](space-and-layout_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- Use of white space helps readability and focus\n- Grouping of related graphs can help navigating through complex data\n- We can split our data in groups using facetting\n:::\n",
    "supporting": [
      "space-and-layout_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "f50e7486c44ec63e9d0020df8ea69770",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting started\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Learning outcomes\n\n- Learn basic programming techniques\n\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n### Libraries\n### Functions\n:::\n:::\n\n## Purpose and aim\n\nUsing a programming language to analyse, visualise and communicate your data has many advantages over point-and-click programmes.\n\n* it documents analysis steps with code, aiding reproducibility\n* allows scaling to large data\n* generates high quality graphics that can be adjusted\n\n## Introduction\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nThe term \"**R**\" is used to refer to both the programming language and the\nsoftware that interprets the scripts written using it.\n\n**RStudio** is an additional software that makes it easier to \ninteract with R by providing tools that make programming easier. \nTo function correctly, RStudio needs R and therefore both need to be installed on your computer.\n\nSome advantages of using R for your data analysis include:\n\n- Analysis steps are documented with code, allowing for greater reproducibility. \n- There are thousands of packages (extensions) available, making R a very flexible \n  and powerful tool, for a wide range of applications. \n- Analysis can be scaled to large data.\n- Can generate a wide range of high-quality graphics for data visualisation.\n- There is a large community of contributors.\n- It's free and open source.\n\n\n### The RStudio Interface  \n\nRStudio is divided into four \"panes\", illustrated below. \nThe default layout is:\n\n- Top Left - **Source**: this is where you edit your R scripts \n  (this panel might not appear until you create a script, which we demonstrate below).\n- Bottom Left - **Console**: where R will execute commands and print results.\n- Top Right - **Environment**: this will show you which objects you create \n  while working with R.\n- Bottom Right - **Files**/**Plots**/**Packages**/**Help**: several tabs that allow \n  you to navigate your files, view plots, view installed packages and search help files. \n\n\n![](images/00-RStudio_screen.png)\n\n:::\n\n## Getting set up\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nIt is good practice to keep a set of related data, analyses, and text\nself-contained in a single folder called the **working directory** (usually a folder \non your computer where you have all the files relating to a project you're working on). \n\nThe working directory is an important concept to understand. It is the place\nwhere R will look for and save files.\n\nAll of the scripts within this folder can then use *relative paths* to files. \nRelative paths indicate where inside the project a file is located (as opposed to \nabsolute paths, which point to where a file is on a specific computer). \nWorking this way makes it a lot easier to move your project around on your computer \nand share it with others without having to directly modify file paths in the individual \nscripts.\n\nRStudio provides a helpful set of tools to do this through its **Projects**\ninterface, which not only creates a working directory for you but also remembers\nits location (allowing you to quickly navigate to it). The interface also \npreserves custom settings and open files to make it easier to resume work after \na break. \n\n\n### Creating a new project\n\nUsually, you will already have a folder on your computer for your project, for \nexample with some data you collected or downloaded from the web. \n\nTo create an _R Project_ within the `r-workshop` directory:\n\n- From the upper menu on RStudio click: <kbd>File</kbd> > <kbd>New project</kbd> > <kbd>Existing directory</kbd>.\n- Click the <kbd>browse...</kbd> button and navigate and open your `r-workshop` folder. \n- Click on <kbd>Create project</kbd>. This will initiate a fresh R session.\n\nFrom now on, whenever you want to work on this project, open the the `Rproj` file \nthat was created in your `r-workshop` folder.\n\nThis will ensure your working directory is automatically set correctly. This also means \nthat you can move the project folder to a different location or even different \ncomputer. As long as you open the `Rproj` file, your working directory will be set correctly. \n\nIf you need to check your working directory, you can run `getwd()` on the console. \nIf for some reason your working directory is not what it should be, you can change it in the RStudio interface by navigating in the file browser (bottom-right panel) to where your working directory should be, clicking on the blue gear icon \n<kbd>More</kbd> > <kbd>Set As Working Directory</kbd>.\n\nAlternatively, you can run `setwd(\"/path/to/working/directory\")` on the console to \nreset your working directory. However, your scripts should not include this line, \nbecause it will fail on someone else's computer.\n\n:::\n\n## Writing code\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nNow that we have a project, let's run our first commands in R.\n\nOn the _console_ panel, type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 100\n```\n:::\n\n\nAnd R will print out the answer, with a preceding `[1]`. Don't worry about\nthis for now, we'll explain that later. For now think of it as indicating\noutput.\n\nAny time you hit return and the console shows a \"`+`\" instead of a \"`>`\", it\nmeans it's waiting for you to complete the command. If you want to cancel a\ncommand you can hit <kbd>Esc</kbd> and RStudio will give you back the `>` prompt.\n\n:::\n\n## Creating scripts\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nSo far, we've been typing these commands directly in the R console. However, if we \nclosed RStudio and later wanted to recreate these operations, there would be no \nrecord of them anywhere. \n\nIn practice, we should always write our code in a **script**, which is a plain text \ndocument with our commands written in it. \nTo create a new R script go to <kbd>File</kbd> > <kbd>New File</kbd> > <kbd>R Script</kbd>.\n\nThis will open a panel on the top-left. This is a text editor, which in RStudio \ndoes some syntax highlighting (it colours the code) to help read the code. \n\nAs you're adding code to the script, you can run it interactively on the console \nby pressing the shortcut <kbd>Ctrl</kbd>+<kbd>Enter</kbd>. \n\n:::\n\n## Installing and loading packages\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nAdditional packages can be installed to extend the functionality of R. \nMost packages are available in a central repository called CRAN and can be \ninstalled from within R using the `install.packages()` function.\n\nFor example, to install (or update) the `tidyverse` package, you would run the \nfollowing command on the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nBecause the install process accesses the CRAN repository, you will need an Internet \nconnection to install packages.\n\nAfter this, you can then load the package to use it in your analysis. For the example above, we would do that as follows with the `library()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n:::\n\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- We use a working directory to organise our projects\n- Using scripts we're able to keep a record of our code\n- Packages or libraries give additional functionality\n:::\n",
    "supporting": [
      "intro-to-programming_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
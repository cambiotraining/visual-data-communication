{
  "hash": "14db413f57635322028dca05bb3cac69",
  "result": {
    "markdown": "---\ntitle: \"Introduction to plotting\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Learning outcomes\n\n- Be able to create basic plots\n\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n### Libraries\n### Functions\n\n:::\n:::\n\n## Purpose and aim\n\nBe able to create basic plots to explore your data.\n\n## Loading data\n\nIf you haven't done so yet, please load the data as follows:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinches <- read_csv(\"data/finches.csv\")\n```\n:::\n\n\n:::\n\n## Building a plot\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nHere we'll learn how to build a plot, using the `ggplot2` package. This package has a consistent set of grammer rules that allow you to create a plot. It needs 3 basic pieces of information:\n\n- A **data.frame** with data to be plotted\n- The variables (columns of `data.frame`) that will be _mapped_ to different \n**aesthetics** of the graph (e.g. axis, colours, shapes, etc.)\n- the **geometry** that will be drawn on the graph (e.g. points, lines, \nboxplots, violinplots, etc.)\n\nThis translates into the following basic syntax:\n\n``` r\nggplot(data = <data.frame>, \n       mapping = aes(x = <column of data.frame>,\n                     y = <column of data.frame>)) +\n   geom_<type of geometry>()\n```\n\n\nFor our first visualisation, let's play around with our `finches` data.\n\nThe question we're interested in is: how much separation is there between \nthe two finch species in terms of beak length and beak depth?\n\nA [scatterplot](https://www.data-to-viz.com/graph/scatter.html)\nshowing the relationship between `bdepth` and `blength`. \n\nLet's do it step-by-step to see how `ggplot2` works. \nStart by giving data to `ggplot`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = finches)\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThat \"worked\" (as in, we didn't get an error). \nBut because we didn't give `ggplot()` any variables to be _mapped_ to _aesthetic_ \ncomponents of the graph, we just got an empty square. \n\nFor **mappping columns to aesthetics**, we use the `aes()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = finches, \n       mapping = aes(x = bdepth,\n                     y = blength))\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThat's better, now we have some axis. Notice how `ggplot()` defines the axis based \non the range of data given. \nBut it's still not a very interesting graph, because we didn't tell what it is we \nwant to draw on the graph.\n\nThis is done by adding (literally `+`) **geometries** to our graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = finches, \n       mapping = aes(x = bdepth,\n                     y = blength)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nIf you have any missing values then `geom_point()` will warn you that it had to remove some missing values. After all, if the data is missing for at least one of the variables, then it cannot plot the points.\n\n:::\n\n## Changing aesthetics\nLet's say we're not very happy with the default options we have been given here. The colour of the data points isn't terribly exciting and there appears to be a bit of overlap as well.\n\nWe can define these attributes within `ggplot()`. For example, to change the colour of the data points we can do the following:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = finches, \n       mapping = aes(x = bdepth,\n                     y = blength)) +\n  geom_point(colour = \"firebrick\")\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n:::\n\nTo fix the issue with overlapping data points, we can change the level of transparency. This is set with the `alpha` argument, where `alpha = 1` is no transparency at all and `alpha = 0` is complete transparency. We'll pick something in between 0 and 1.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = finches, \n       mapping = aes(x = bdepth,\n                     y = blength)) +\n  geom_point(alpha = 0.6)\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n:::\n\n## Changing aesthetics based on data\n\nIn the plot above we lumped all the data together. We've ignored the fact that these measurements come from two different species. These species are also subdivided into different groups. We'll explore the grouping later, but now we're interested to see if there are clear differences between the species.\n\nA way to visualise this is by colouring the points based on a variable of interest, in our case `species`. \n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can do this by passing this information to the `colour` aesthetic _inside_ the \n`aes()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = finches, \n       mapping = aes(x = bdepth,\n                     y = blength,\n                     colour = species)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip}\n## Aesthetics: inside or outside `aes()`?\n\nThe previous examples illustrate an important distinction between _aesthetics_ defined inside or outside of `aes()`:\n\n- if you want the _aesthetic_ to change **based on the data** it goes **inside `aes()`**\n- if you want to **manually specify** how the geometry should look like, it goes **outside `aes()`**\n:::\n\n:::\n\n## Multiple geometries\n\nOften, we may want to overlay several geometries on top of each other. For example, we might want to visualise a box plot together with the data points.\n\nLet's start by creating a plot that shows our data, split by `species`. In that case, `species` ends up on the x-axis, and the variable of interest is `blength` (beak length). This goes onto the y-axis.\n\nThat gives us the following:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(finches, aes(x = species,\n                    y = blength)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nTo layer a boxplot on top of it we \"add\" (with `+`) another geometry to the graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(finches, aes(x = species,\n                    y = blength)) +\n  geom_point() +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](intro-to-plotting_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\nThe order in which you add the geometries defines the order they are \"drawn\" on the graph. \nFor example, try swapping their order and see what happens.\n\nNotice how we've shortened our code by omitting the names of the \noptions `data = ` and `mapping = ` inside `ggplot()`. Because the data is always \nthe first thing given to `ggplot()` and the mapping is always identified by the \nfunction `aes()`, this is often written in the more compact form as we just did.\n\n## Exercises\n\n### Finch weight {#sec-exr_weight}\n\n:::{.callout-exercise}\n\n\n{{< level 2 >}}\n\n\n\nExploring weight\n\n::: {.callout-answer collapse=true}\n## Answer\n\n::: {.panel-tabset group=\"language\"}\n## R\n:::\n:::\n:::\n\n\n## Key points\n\n::: {.callout-note}\n\n- We can build plots layer by layer\n- Aesthetics can be based on data\n\n:::\n",
    "supporting": [
      "intro-to-plotting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
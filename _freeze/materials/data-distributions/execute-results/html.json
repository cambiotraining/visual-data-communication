{
  "hash": "cc9a1455ea21a9a6eec7593b10a0c578",
  "result": {
    "markdown": "---\ntitle: \"Data distributions\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Learning outcomes\n\n- Understand why we explore data distributions\n- Be able to visualise the structure of data\n- Use gained insight to explore further questions\n\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n### Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(visdat)\n```\n:::\n\n\n### Functions\n\n## Python\n\n### Libraries\n### Functions\n:::\n:::\n\n## Gapminder data set\n\nThe `gapminder` data set has 13 different variables, with observations for over 150 different countries in the year 2010.\n\nSometimes we're dealing with rather large data sets, whereas other times it might be small. A good starting point of any analysis/exploration is to get a broad overview of how our data is structured.\n\n## Loading data\n\nIf you haven't done so yet, please load the data as follows:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- read_csv(\"data/gapminder_clean.csv\")\n```\n:::\n\n\n## Python\n:::\n\n## Data structure\n\nThere are different ways to gain insight into the structure of your data. You can do this numerically or visually.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nIn R we can use a package called `visdat` to visualise the structure of our data. If you haven't installed it yet, please run the following code in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"visdat\")\n```\n:::\n\n\nWe can then visualise our data structure with the `vis_dat()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvis_dat(gapminder)\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nLooking at the y-axis, we can see that there are over 150 observations in this data set. The data are organised and coloured by type, with the column names (our variables) at the top.\n\nFrom this we can see that we have several character or text variables (e.g. `country`, `world_region`). There are also several numerical variables, such as `year` and `children_per_woman`.\n\nThere is one variable which contains logical data (`TRUE/FALSE`), called `is_oecd`.\n\n## Python\n:::\n\nThere is a wealth of data there! So where do we go from here? In this case we're going to use one of the variables as an example. We'll use `life_expectancy` to illustrate how you can get more insight into how certain parts of your data are distributed.\n\n## Box plots\n\nAn easy way to get a sense of the data distribution is to create a box plot. For the `life_expectancy` variable we can do this as follows:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = 1,\n           y = life_expectancy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nSince we are plotting only one variable, we're defining the `x` value as 1, but it doesn't actually have any numerical meaning.\n\nBox plots give you some summary statistics, so therefore it's often useful to plot them together with the actual data. We can do this quite easily by adding another layer to the plot that contains the data points. We're also adding some transparency (`alpha = 0.4` - which is 40% opacity) so we can still see the box plots themselves. We're also defining the `width = 0.1` so that the data points are not spread out over the entire width of the box plot, but are constrained a bit more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = 1,\n           y = life_expectancy)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.4, width = 0.1)\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Python\n:::\n\n### Exercises\n\n::: {.callout-note icon=false}\n## Exercise: Income box plot\n\n**Level:** {{< fa solid star >}} {{< fa regular star >}} {{< fa regular star >}}\n\nCreate a box plot that displays the `income_per_person`. Overlay the data points on top of the plot. What can you see?\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = 1,\n           y = income_per_person)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.4, width = 0.1)\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Python\n:::\n\nIncome per person across the different countries is not equally spread. We can see this in the location of the median (the horizontal black line in the box plot), which is not centered inside the box.\n\nLooking at the actual data makes this even more obvious: a small set of countries have a rather high level of income, with one country standing out above the rest.\n:::\n:::\n\n::: {.callout-note icon=false}\n## Exercise: High income countries\n\n**Level:** {{< fa solid star >}} {{< fa solid star >}} {{< fa regular star >}}\n\nThe spread of income per person is not equal and it would be useful to explore this a bit more. Try and find answers to the following questions:\n\n1. How does income per person vary across the different world regions?\n2. What is the country with the highest income per person?\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\nTo see if income per person varies across the world regions, we can group the data based on `world_region`. We adjust the previous box plot as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = world_region,\n           y = income_per_person)) +\n  geom_boxplot() +\n  geom_jitter(alpha = 0.4, width = 0.1)\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nTo find the country with the highest level of income, we need to filter our data. We need to do this in descending order, so we're combining the `arrange()` function with the `desc()` helper function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(desc(income_per_person))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 167 × 13\n   country  world_region  year children_per_wo… life_expectancy income_per_pers…\n   <chr>    <chr>        <dbl>            <dbl>           <dbl>            <dbl>\n 1 Qatar    middle_east…  2010             2.07            78.0           119974\n 2 Luxembo… europe_cent…  2010             1.58            80.8            91743\n 3 Brunei   east_asia_p…  2010             1.84            75.1            80556\n 4 Kuwait   middle_east…  2010             2.22            81.2            75360\n 5 Singapo… east_asia_p…  2010             1.26            83.2            73061\n 6 Norway   europe_cent…  2010             1.95            80.9            62350\n 7 Switzer… europe_cent…  2010             1.5             82.5            55866\n 8 United … middle_east…  2010             1.87            72.9            55363\n 9 United … america       2010             1.93            78.7            49479\n10 Netherl… europe_cent…  2010             1.8             80.8            46102\n# … with 157 more rows, and 7 more variables: is_oecd <lgl>,\n#   income_groups <chr>, population <dbl>, main_religion <chr>,\n#   child_mortality <dbl>, life_expectancy_female <dbl>,\n#   life_expectancy_male <dbl>\n```\n:::\n:::\n\n\n## Python\n:::\n\n1. Income per person varies markedly across the different world regions, with low income levels in South Asia and sub-Saharan Africa. Another notable thing is that income in the Middle East/North Africa region has a huge spread.\n\n2. The country with the highest income per person (in 2010) is Qatar, with an income of 120 thousand dollars per person.\n:::\n:::\n\n## Violin plots\n\nViolin plots are similar to box plots, but they give extra information on the distribution of the data. This can be particularly useful if your data is multi-modal, as in, it has more than one peak.\n\nThis can happen if your data splits into two or more discernible groups.\n\nLet's say we wanted to look at the number of children women get, across the different religions.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can use `geom_violin()` to create a violin plot in `ggplot2`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = main_religion,\n           y = children_per_woman)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Python\n:::\n\nWe can see that in Christian countries having just under 2 children (on average!) is most common. We can see this because the violin is 'fattest' just below 2. However, there is quite a range, with some countries having up to 6 children on average.\n\nComparing across the religions shows that in Eastern religions having lots of children is very uncommon, whereas in Muslim countries this does occur.\n\n### Exercises\n\n::: {.callout-note icon=false}\n## Children per woman across different world regions\n\n**Level:** {{< fa solid star >}} {{< fa regular star >}} {{< fa regular star >}}\n\nCreate a single plot that contains violins for the number of children per woman, for each world region.\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = world_region,\n           y = children_per_woman)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Python\n:::\n:::\n:::\n\n## Histograms\n\nAnother way to look at how data is distributed is to create a histogram. Here we slice our data into intervals (for example, in 5 year chunks e.g. 35-40 years, 40-45 years etc) and count how many observations fall into each interval. This gives us a frequency for the number of observations into each interval group.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can do this quite straightforwardly by using `geom_histogram()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = life_expectancy)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nWhen you run this bit of code it gives you some information:\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\nWhat this means is that it chopped our data into 30 chunks/intervals and done the counting based on that. This might not be what we want and we can change this by changing the `bins` argument or using `binwidth`. The difference between the two is that with, for example, `bins = 10` we're saying \"chop the data into 10 equal chunks\" whereas with `binwidth = 10` we're saying \"chop the data into chunks of 10 years each\".\n\nTo illustrate that histograms can vary heavily depending on the bin size, look at the following plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = life_expectancy)) +\n  geom_histogram(bins = 5) +\n  labs(title = \"bins = 5\")\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = life_expectancy)) +\n  geom_histogram(bins = 15) +\n  labs(title = \"bins = 15\")\n```\n\n::: {.cell-output-display}\n![](data-distributions_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n:::\n\n\n## Python\n:::\n\nThis means that our interpretation can also change, depending on the number of bins we've specified. So we need to be aware of this when we're using histograms!\n\nHowever we slice the data, the largest number of countries with similar life expectancy seem to be in the 70-80 year range.\n\nThere is also one country where life expectancy is very low and if I'd see a plot like this I would definitely want to investigate that further!\n\n### Exercises\n\n::: {.callout-note icon=false}\n## Exercise: Lowest life expectancy\n\n**Level:** {{< fa solid star >}} {{< fa regular star >}} {{< fa regular star >}}\n\nFind the country that has the lowest life expectancy.\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can arrange the data by `life_expectancy` in ascending order, using the `arrange()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  arrange(life_expectancy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 167 × 13\n   country  world_region  year children_per_wo… life_expectancy income_per_pers…\n   <chr>    <chr>        <dbl>            <dbl>           <dbl>            <dbl>\n 1 Haiti    america       2010             3.33            32.5             1510\n 2 Eswatini sub_saharan…  2010             3.53            46.0             8242\n 3 Lesotho  sub_saharan…  2010             3.3             47.8             2419\n 4 Zimbabwe sub_saharan…  2010             4.03            49.7             1928\n 5 Mozambi… sub_saharan…  2010             5.56            52.0              945\n 6 Malawi   sub_saharan…  2010             5.31            54.2             1078\n 7 Somalia  sub_saharan…  2010             6.87            55.0              614\n 8 Zambia   sub_saharan…  2010             5.4             56.0             3338\n 9 South A… sub_saharan…  2010             2.59            56.1            11973\n10 Papua N… east_asia_p…  2010             3.99            56.3             3103\n# … with 157 more rows, and 7 more variables: is_oecd <lgl>,\n#   income_groups <chr>, population <dbl>, main_religion <chr>,\n#   child_mortality <dbl>, life_expectancy_female <dbl>,\n#   life_expectancy_male <dbl>\n```\n:::\n:::\n\n\n## Python\n:::\n\nThe country with the lowest life expectancy is Haiti. The year 2010 was particularly bad for them, since there was a [catastrophic earthquake](https://en.wikipedia.org/wiki/2010_Haiti_earthquake), that may very well have had an effect on the life expectancy in the country that year.\n\n:::\n:::\n\n## Key points\n\n::: {.callout-note}\n\n- Data distributions allows us to understand the structure of our data better\n- Box and violin plots give us summary statistics\n- Histograms displays the frequency of observations\n:::\n",
    "supporting": [
      "data-distributions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "6c6b30652163ade463c083705f19200f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Finding correlations\"\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip}\n## Learning outcomes\n\n- Be able to find correlations within data\n- Know how to visualise and interpret correlations\n\n:::\n\n## Libraries and functions\n\n::: {.callout-note collapse=\"true\"}\n## Click to expand\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n### Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(visdat)\n```\n:::\n\n\n### Functions\n\n:::\n:::\n\n## Purpose and aim\n\nWhen we set off to gather or explore data, we generally have a research question that we're interested in. We then design an experiment to test this question - in that case our data helps us to find an answer.\n\nQuite often we gather a lot more data than we directly need to answer our research question. As such, it's often very useful to explore our data and look for patterns or correlations.\n\n## Loading data\n\nThe first step to exploring our data is of course loading it in the first place.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- read_csv(\"data/gapminder_clean.csv\")\n```\n:::\n\n\n:::\n\nThe `gapminder` data set that we've loaded has 13 different variables, with observations for over 150 different countries in the year 2010.\n\n## Correlating variables\n\nTo illustrate how we can use correlate variables to one another, we're going to focus on `life_expectancy` in different contexts.\n\nLet's start off with a simple scatter plot that looks at `life_expectancy` against `income_per_person`:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = income_per_person,\n           y = life_expectancy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n:::\n\nIt seems that as the income per person increases, so does the life expectancy. We can also see that the life expectancy kind of plateaus - which is not very surprising, since it can't go on indefinitely!\n\nLooking at this plot, it's quite striking how there is quite a range of life expectancy values at the really low income countries. We know that there is information on different world regions in the data (`world_region`). Perhaps there are certain world regions that have particularly low income levels?\n\nThis is something we can easily check.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe simply adjust the previous plot by colouring our data by `world_region`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = income_per_person,\n           y = life_expectancy,\n           colour = world_region)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n:::\n\nLooking at this plot it appears that most of the low-income countries are in sub-Saharan Africa.\n\nWe could explore this _even_ further by, for example, adding information on the population size to the plot:\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nWe can adjust the previous plot by adding size to our plot, based on `population`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = income_per_person,\n           y = life_expectancy,\n           colour = world_region,\n           size = population)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-important}\nIt's easy to add too much information to a single plot. In the example above, we're actually plotting four different variables in a single plot:\n\n* `income_per_person` on the x-axis\n* `life_expectancy` on the y-axis\n* `world_region` as colour\n* `population` as size\n\nWhether this helps convey whatever message you have is not exactly clear. We'll talk more about the purpose of a plot and the audience in the next section.\n:::\n\n### Exercises\n\n::: {.callout-note icon=false}\n## Income levels across main religions\n\n**Level:** {{< fa solid star >}} {{< fa regular star >}} {{< fa regular star >}}\n\nPlot life expectancy vs income per person for the main religions.\n\nCan you see any trends?\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder,\n       aes(x = income_per_person,\n           y = life_expectancy,\n           colour = main_religion)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\nThere are no clear trends in these data, apart from that the data are very spread out!\n\nWhat we _can_ see in the plot is that the country with the highest income per person is a Muslim country, and the second-highest income country is Christian.\n:::\n:::\n\n::: {.callout-note icon=false}\n## Income extremes\n\n**Level:** {{< fa solid star >}} {{< fa solid star >}} {{< fa regular star >}}\n\nTry the following:\n\n1. Find the 5 highest income countries\n2. Find the 5 lowest income countries\n3. Create a box plot with those data points\n\nHint: it might be easiest to save the results in two separate objects.\n\n::: {.callout-tip collapse=\"true\"}\n## Answer\n::: {.panel-tabset group=\"language\"}\n## R\n\nFirst, we get the 5 highest income countries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop5_income <- gapminder %>% \n  arrange(desc(income_per_person)) %>% \n  slice(1:5)\n```\n:::\n\n\nNext, we get the 5 lowest income countries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbottom5_income <- gapminder %>% \n  arrange(income_per_person) %>% \n  slice(1:5)\n```\n:::\n\n\nLastly, we can plot this as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = top5_income,\n       aes(x = \"top 5\", y = income_per_person)) +\n  geom_boxplot() +\n  # create new box using the bottom 5 data\n  geom_boxplot(data = bottom5_income,\n               aes(x = \"bottom 5\", y = income_per_person))\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n:::\n:::\n:::\n\n## Visualising correlations\n\nA standard method of looking for correlations is to use a correlation matrix. These are often generated by using Pearson's r - a measure of correlation. If you're interested in finding out more, see [Core statistics 3: correlations](https://cambiotraining.github.io/corestats/materials/cs3_practical_correlations.html).\n\nThis is not a statistics course, but what we're doing here is focussing on how we can visualise such a matrix. A matrix is simply a data frame with just numerical values. The reason why we can't use the _entire_ gapminder data set is because we can't calculate correlations between groups. After all, it wouldn't make sense to explore if world region is correlated with main religion, for example!\n\nBecause we're only able to calculate correlations between numerical variables, we first need pull out only those columns that are numeric. We're also not interested in the `year` variable, because we know there is only one value in that one anyway (the year 2010),\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  select(where(is.numeric)) %>% \n  select(-year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 167 × 7\n   children_per_woman life_expectancy income_per_person population\n                <dbl>           <dbl>             <dbl>      <dbl>\n 1               5.82            59.8              1672   29185511\n 2               6.16            59.9              6360   23356247\n 3               1.65            77.6              9928    2948029\n 4               1.87            72.9             55363    8549998\n 5               2.37            75.8             18912   40895751\n 6               1.55            74.0              6703    2877314\n 7               2.13            76.6             20660      88030\n 8               1.93            82.0             41530   22154687\n 9               1.44            80.6             43336    8409945\n10               1.96            69.3             16216    9032465\n# ℹ 157 more rows\n# ℹ 3 more variables: child_mortality <dbl>, life_expectancy_female <dbl>,\n#   life_expectancy_male <dbl>\n```\n\n\n:::\n:::\n\n\n:::\n\nAfter this, we can calculate the correlation matrix.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\nOne of the ways we can do this is by using the `cor()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  select(where(is.numeric)) %>% \n  select(-year) %>% \n  cor(method = \"pearson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       children_per_woman life_expectancy income_per_person\nchildren_per_woman             1.00000000     -0.72197292       -0.49069393\nlife_expectancy               -0.72197292      1.00000000        0.57306921\nincome_per_person             -0.49069393      0.57306921        1.00000000\npopulation                    -0.08242701      0.02021798       -0.05518878\nchild_mortality                0.83205416     -0.87918658       -0.50622105\nlife_expectancy_female        -0.82605805      0.93001838        0.57434713\nlife_expectancy_male          -0.75909310      0.93125439        0.61432730\n                         population child_mortality life_expectancy_female\nchildren_per_woman     -0.082427010     0.832054159            -0.82605805\nlife_expectancy         0.020217982    -0.879186584             0.93001838\nincome_per_person      -0.055188782    -0.506221048             0.57434713\npopulation              1.000000000    -0.005857309             0.01509248\nchild_mortality        -0.005857309     1.000000000            -0.89127415\nlife_expectancy_female  0.015092483    -0.891274153             1.00000000\nlife_expectancy_male    0.032751043    -0.843957872             0.96776823\n                       life_expectancy_male\nchildren_per_woman              -0.75909310\nlife_expectancy                  0.93125439\nincome_per_person                0.61432730\npopulation                       0.03275104\nchild_mortality                 -0.84395787\nlife_expectancy_female           0.96776823\nlife_expectancy_male             1.00000000\n```\n\n\n:::\n:::\n\n:::\n\nThis is of course a hideously large table, which is almost impossible to interpret. But that's the point! It's much easier to use a visual representation of these data. Well, once the data are in the right format, that is.\n\nDon't worry if the data wrangling is a bit overwhelming, at this stage it's not essential that you understand that bit of code - but more that you're able to see how we can visualise these data.\n\n::: {.panel-tabset group=\"language\"}\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder_cor <- gapminder %>% \n  select(where(is.numeric)) %>% \n  select(-year) %>% \n  cor(method = \"pearson\") %>% \n  as_tibble(rownames = \"var1\") %>% \n  pivot_longer(cols = -var1,\n               names_to = \"var2\",\n               values_to = \"pearson_cor\") %>% \n  mutate(pearson_cor = round(pearson_cor, digits = 3)) %>% \n  drop_na()\n```\n:::\n\n\nThis gives us a table with the following format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gapminder_cor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  var1               var2                   pearson_cor\n  <chr>              <chr>                        <dbl>\n1 children_per_woman children_per_woman           1    \n2 children_per_woman life_expectancy             -0.722\n3 children_per_woman income_per_person           -0.491\n4 children_per_woman population                  -0.082\n5 children_per_woman child_mortality              0.832\n6 children_per_woman life_expectancy_female      -0.826\n```\n\n\n:::\n:::\n\n\nWe can then plot the correlation matrix, plotting `var1` on the x-axis and `var2` on the y-axis. To aid visualisation, we're using the `geom_tile()` geometry, which creates a tile plot. The colour of each tile depends on the value of the correlation coefficient (`pearson_cor`). Together, this creates a heatmap of the data, where the values are depicted by colour.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder_cor,\n       aes(x = var1, y = var2, fill = pearson_cor)) +\n  geom_tile()\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nAnnoyingly, the x-axis labels are a bit obscured, so improve readability we rotate them 45 degrees. This is not entirely intuitive, but a quick Google search using the phrase [\"rotate text label ggplot\"](https://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2) brings us to an answer on Stackoverflow that we can easily adapt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder_cor,\n       aes(x = var1, y = var2, fill = pearson_cor)) +\n  geom_tile() +\n  theme(axis.text.x = element_text(angle = 45, hjust=1))\n```\n\n::: {.cell-output-display}\n![](correlations_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n:::\n\nThe variables across the diagonals are perfectly correlated (with a correlation coefficient of 1). This makes sense because, for example, `child_mortality` would be perfectly correlated with... itself!\n\nOther notable things are that the male/female life expectancy variables are quite highly correlated with overall life expectancy.\n\nThe correlation between life expectancy and income (which we explored previously using the scatter plot) is also reasonably strong and positive.\n\nSeveral variables are negatively correlated with one another, such as child mortality and life expectancy. This sad example makes sense, because if the child mortality rate in a country is high, it's not inconceivable that this has an effect on the overall life expectancy in that country.\n\n## Summary\n\n::: {.callout-tip}\n#### Key points\n\n- We can find correlations by calculating correlation coefficients\n- Scatter plots allow us to visualise correlations between two variables\n- Tile plots or heatmaps are useful to visualise large numbers of correlations\n:::\n",
    "supporting": [
      "correlations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}